
import { GoogleGenAI, Type } from "@google/genai";
import { DetectorResult } from '../types';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

export const paraphraseText = async (text: string): Promise<string> => {
  if (!text.trim()) return "";
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: `Paraphrase the following text. Be comprehensive and maintain the original meaning and tone, but use different vocabulary and sentence structures. Do not add any intro, conclusion, or commentary. Output only the paraphrased text.

      Original Text:
      ---
      ${text}
      ---
      `,
    });
    return response.text;
  } catch (error) {
    console.error("Error paraphrasing text:", error);
    throw new Error("Failed to paraphrase text. Please check your API key and network connection.");
  }
};

export const humanizeText = async (text: string): Promise<string> => {
  if (!text.trim()) return "";
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: `Rewrite the following text to make it sound more human-like and natural. Vary sentence length, use more engaging vocabulary, and improve the overall flow. The goal is to remove any robotic or overly formal tone while preserving the core message. Output only the humanized text.

      Original Text:
      ---
      ${text}
      ---
      `,
    });
    return response.text;
  } catch (error) {
    console.error("Error humanizing text:", error);
    throw new Error("Failed to humanize text. Please check your API key and network connection.");
  }
};

export const detectAIText = async (text: string): Promise<DetectorResult> => {
  if (!text.trim()) return { score: 0, explanation: "Please enter text to analyze." };
  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: `Analyze the following text and determine the probability that it was generated by an AI. Provide your analysis in a JSON format. The JSON object must have two keys: "score" (a number between 0.0 and 1.0, where 1.0 means 100% likely to be AI-generated) and "explanation" (a brief, one or two sentence explanation for your reasoning, highlighting specific characteristics of the text).

      Text to analyze:
      ---
      ${text}
      ---
      `,
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.OBJECT,
          properties: {
            score: {
              type: Type.NUMBER,
              description: "The probability score between 0.0 and 1.0."
            },
            explanation: {
              type: Type.STRING,
              description: "A brief explanation of the score."
            }
          },
          required: ["score", "explanation"]
        },
      },
    });

    const jsonStr = response.text.trim();
    const result = JSON.parse(jsonStr);
    
    // Clamp score to be between 0 and 1
    result.score = Math.max(0, Math.min(1, result.score));

    return result as DetectorResult;

  } catch (error) {
    console.error("Error detecting AI text:", error);
    throw new Error("Failed to analyze text. The model may have returned an unexpected format.");
  }
};
